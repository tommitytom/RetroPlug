
The CSS Preprocessor lexer follows the normal CSS lexer.

Source: http://www.w3.org/TR/css-syntax-3/

################################
### Basic Character Sequence ###
################################

ANY_CHAR: [\x00-\x10FFFF]

HEXDIGIT: [0-9A-Fa-f]

ESCAPE: '\' HEXDIGIT{1,6} ' '?   -- space is optional unless that character is followed by an HEXDIGIT
      | '\' [^HEXDIGIT ^NEWLINE] -- escape one character other than HEXDIGIT
                                 -- invalid escape characters or \x0 return \xFFFD instead

NEWLINE: '\x0D'                  -- note that \x0A \x0D repersents two lines
       | '\x0A'
       | '\x0C'
       | '\x0D' '\x0A'

INVALID: '\x00'                  -- should convert '\x00' to '\xFFFD' (TBD--not too sure what \xFFFD will do yet)
       | '\xFFFD'                -- returned as EOF in css-syntax-3

NON-ASCII: [\x80-\x10FFFF]

COMMENT: '/' '*' [^('*' '/')]* '*' '/'
       | '/' '/' [^NEWLINE]* NEWLINE   -- this is not in CSS, we allow it though

WHITESPACE: ' '
          | '\t'
          | NEWLINE
          -- note that COMMENT is not viewed as a white space...

START-IDENT-CHAR: ([a-zA-Z_ NON-ASCII] | ESCAPE)

IDENT-CHAR: ([-0-9a-zA-Z_ NON-ASCII] | ESCAPE)

STRING-CHAR: ANY-CHAR                -- except " or '
           | ESCAPE
           | '\' NEWLINE
           | '\' EOF                 -- represents 'nothing' (remove the \)

NON-PRINTABLE: [\x00\x08\x0B\x0E-\x1F\x7F]


##############
### Tokens ###
##############

WHITESPACE-TOKEN: WHITESPACE*

UNICODE-RANGE-TOKEN: [uU] '+' HEXDIGIT{1,n} '?'{n+1,6}      -- n hex digit followed by '?'
                   | [uU] '+' HEXDIGIT{1,6} '-' HEXDIGIT{1,6}

IDENT-TOKEN: '-'? START-IDENT-CHAR IDENT-CHAR*

AT-KEYWORD-TOKEN: '@' IDENT-TOKEN

HASH-TOKEN: '#' IDENT-TOKEN          -- if this matches, mark the HASH-TOKEN with the 'id' flag
          | '#' IDENT-CHAR+

STRING-TOKEN: '"' STRING-CHAR* '"'   -- " must be escaped, EOF is a valid terminator
            | "'" STRING-CHAR* "'"   -- ' must be escaped, EOF is a valid terminator

URL-UNQUOTED: ANY-CHAR               -- except " or ' or \ or ( or ) or NON-PRINTABLE
            | ESCAPE

URL-TOKEN: [uU] [rR] [lL] '(' WHITESPACE* ( URL-UNQUOTED | STRING-TOKEN ) WHITESPACE* ')'

FUNCTION-TOKEN: IDENT-TOKEN '('

NUMBER-TOKEN: [-+] DIGIT+ ( '.' DIGIT+ )? ( [eE] [-+]? DIGIT+ )?
            | [-+] '.' DIGIT+ ( [eE] [-+]? DIGIT+ )?

DIMENSION-TOKEN: NUMBER-TOKEN IDENT-TOKEN

PERCENTAGE-TOKEN: NUMBER-TOKEN '%'

INCLUDE-MATCH-TOKEN: '~' '='

DASH-MATCH-TOKEN: '|' '='

PREFIX-MATCH-TOKEN: '^' '='

SUFFIX-MATCH-TOKEN: '$' '='

SUBSTRING-MATCH-TOKEN: '*' '='

COLUMN-TOKEN: '|' '|'

CDO-TOKEN: '<' '!' '-' '-'

CDC-TOKEN: '-' '-' '>'

COLON-TOKEN: ':'

SEMICOLON-TOKEN: ';'

COMMA-TOKEN: ','

OPENSQUAREBRACKET-TOKEN: '['

CLOSESQUAREBRACKET-TOKEN: ']'

OPENPARENTHESIS-TOKEN: '('

CLOSEPARENTHESIS-TOKEN: ')'

OPENCURLYBRACKET-TOKEN: '{'

CLOSECURLYBRACKET-TOKEN: '}'

EOF-TOKEN: EOF

DELIM-TOKEN: '#'                -- if HASH-TOKEN did not match
           | '$'                -- '$' by itself if not followed by '='
           | '*'                -- '*' by itself if not followed by '='
           | '+'                -- if NUMBER-TOKEN did not match
           | '-'                -- if not NUMBER-TOKEN, IDENT-TOKEN, CDC-TOKEN
           | '.'                -- if NUMBER-TOKEN did not match
           | '<'                -- if CDO-TOKEN did not match
           | '@'                -- if IDENT-TOKEN did not match
           | '\'                -- if ESCAPE did not match (but this is an error except in a string)
           | '^'                -- '^' by itself if not followed by '='
           | '|'                -- '|' by itself if not followed by '=' or '|'
           | '~'                -- '~' by itself if not followed by '='
           | .                  -- anything else is considered a delimiter


-- for us the An+B is more or less read as: DIMENSION-TOKEN NUMBER
-- with NUMBER being just an integer (i.e. we test that
-- the number had no decimal part); the second number cannot include
-- a sign either
-- support white spaces before/after the second sign
-- WARNING: '-' is a valid IDENT-TOKEN character so the DIMENSION-TOKEN
--          will eventually be "n-"
An+B: DIMENSION-TOKEN WHITESPACE-TOKEN '+' WHITESPACE-TOKEN NUMBER
    | DIMENSION-TOKEN WHITESPACE-TOKEN '-' WHITESPACE-TOKEN NUMBER
    | 'n' WHITESPACE-TOKEN '-' WHITESPACE-TOKEN NUMBER
    | '+' 'n' WHITESPACE-TOKEN '-' WHITESPACE-TOKEN NUMBER
    | '-' 'n' WHITESPACE-TOKEN '-' WHITESPACE-TOKEN NUMBER
    | 'o' 'd' 'd'
    | 'e' 'v' 'e' 'n'




The CSS 2.2 grammar:

stylesheet  : [ CDO | CDC | S | statement ]*;
statement   : ruleset | at-rule;
at-rule     : ATKEYWORD S* any* [ block | ';' S* ];
block       : '{' S* [ any | block | ATKEYWORD S* | ';' S* ]* '}' S*;
ruleset     : selector? '{' S* declaration? [ ';' S* declaration? ]* '}' S*;
selector    : any+;
declaration : property S* ':' S* value;
property    : IDENT;
value       : [ any | block | ATKEYWORD S* ]+;
any         : [ IDENT | NUMBER | PERCENTAGE | DIMENSION | STRING
              | DELIM | URI | HASH | UNICODE-RANGE | INCLUDES
              | DASHMATCH | ':' | FUNCTION S* [any|unused]* ')'
              | '(' S* [any|unused]* ')' | '[' S* [any|unused]* ']'
              ] S*;
unused      : block | ATKEYWORD S* | ';' S* | CDO S* | CDC S*;


# Local Variables:
# indent-tabs-mode: nil
# tab-width: 4
# End:

# vim: ts=4 sw=4 et
